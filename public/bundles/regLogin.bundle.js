(()=>{"use strict";function t(e,n=null){return new Promise((s=>{e.addEventListener("transitionend",(async o=>{n?(o.propertyName===n||await t(e,n),s()):s()}),{once:!0})}))}async function e(e){await t(e,"opacity"),e.classList.add("fully-hidden")}const n=document.querySelector(".reg-login-form"),s=document.querySelector(".centre-modal-wrapper"),o=new class{wrapper;#t;#e;constructor(t){this.wrapper=t,this.#t=t.querySelector(".centre-modal"),this.#e=this.#t.querySelector(".close")}init(){const t=[this.#e,this.wrapper];for(let e of t)e.addEventListener("click",(()=>this.hide()));this.#t.addEventListener("click",(t=>t.stopPropagation()))}show(){var t;(t=this.wrapper).classList.remove("fully-hidden"),setTimeout((()=>t.classList.remove("transparent")),10)}hide(){!async function(t){!function(t){t.classList.add("transparent")}(t),await e(t)}(this.wrapper)}}(s);o.init(),n.addEventListener("submit",(t=>{t.preventDefault(),async function(t){const e=t.currentTarget,n=new FormData(e),s=Object.fromEntries(n.entries()),r=await fetch(e.action,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)}),a=await r.json();"success"===a.status?(console.log(`redirecting to ${a.redirectTo}`),window.location.assign(a.redirectTo)):o.show()}(t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,