(()=>{"use strict";var t={733:(t,n,e)=>{e.d(n,{Yi:()=>a,_5:()=>o});var i=e(922);async function o(t){!function(t){t.classList.remove("fully-hidden"),setTimeout((()=>t.classList.remove("transparent")),10)}(t),await async function(t){await(0,i.hk)(t,"opacity")}(t)}async function a(t){!function(t){t.classList.add("transparent")}(t),await async function(t){await(0,i.hk)(t,"opacity"),t.classList.add("fully-hidden")}(t)}},922:(t,n,e)=>{function i(t,n=null){return new Promise((e=>{t.addEventListener("transitionend",(async o=>{n?(o.propertyName===n||await i(t,n),e()):e()}),{once:!0})}))}e.d(n,{hk:()=>i})}},n={};function e(i){var o=n[i];if(void 0!==o)return o.exports;var a=n[i]={exports:{}};return t[i](a,a.exports,e),a.exports}e.d=(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t=e(733);class n{#t;#n;constructor(t){this.#t=t.querySelector(".pop-btn"),this.#n=t.querySelector(".pop-btn-content")}init(){this.#e(this.#t,this.#n)}#e(t,n){t.addEventListener("click",(()=>{this.#i(t,n)}),{once:!0})}async#i(n,e){await(0,t._5)(e),window.addEventListener("click",(async()=>{await(0,t.Yi)(e),this.#e(n,e)}),{once:!0})}}document.querySelectorAll(".pop-btn-container").forEach((t=>{new n(t).init()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,