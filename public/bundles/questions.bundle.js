(()=>{"use strict";var e={733:(e,t,s)=>{s.d(t,{Ji:()=>n,U6:()=>a,Yi:()=>o,_5:()=>r,xS:()=>u});var i=s(922);function n(e){e.classList.remove("fully-hidden"),setTimeout((()=>e.classList.remove("transparent")),10)}async function r(e){n(e),await async function(e){await(0,i.hk)(e,"opacity")}(e)}function a(e){e.classList.add("transparent")}async function u(e){await(0,i.hk)(e,"opacity"),e.classList.add("fully-hidden")}async function o(e){a(e),await u(e)}},300:(e,t,s)=>{var i=s(733);class n{#e;#t;constructor(e){this.#e=e.querySelector(".pop-btn"),this.#t=e.querySelector(".pop-btn-content")}init(){this.#s(this.#e,this.#t)}#s(e,t){e.addEventListener("click",(()=>{this.#i(e,t)}),{once:!0})}async#i(e,t){await(0,i._5)(t),window.addEventListener("click",(async()=>{await(0,i.Yi)(t),this.#s(e,t)}),{once:!0})}}document.querySelectorAll(".pop-btn-container").forEach((e=>{new n(e).init()}))},922:(e,t,s)=>{function i(e,t,s){const i=e.findIndex((e=>s(e,t)));i>-1?e.splice(i,1,t):e.push(t)}function n(e,t=null){return new Promise((s=>{e.addEventListener("transitionend",(async i=>{t?(i.propertyName===t||await n(e,t),s()):s()}),{once:!0})}))}s.d(t,{cT:()=>i,hk:()=>n})}},t={};function s(i){var n=t[i];if(void 0!==n)return n.exports;var r=t[i]={exports:{}};return e[i](r,r.exports,s),r.exports}s.d=(e,t)=>{for(var i in t)s.o(t,i)&&!s.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=s(733),t=s(922);class i{mainDiv;ratePanel;rateBtn;skipBtn;scoreSlider;scoreSliderInput;currQuestionText;prevAnsDiv;prevAnsVal;loader;details;constructor(e){this.mainDiv=e.querySelector(".answer-panel"),this.ratePanel=this.mainDiv.querySelector(".rate-panel"),this.rateBtn=this.mainDiv.querySelector(".rate-btn"),this.skipBtn=this.mainDiv.querySelector(".skip-btn"),this.scoreSlider=this.mainDiv.querySelector(".score-slider"),this.scoreSliderInput=this.scoreSlider.querySelector("input"),this.currQuestionText=this.mainDiv.querySelector(".curr-question"),this.prevAnsDiv=this.mainDiv.querySelector(".prev-ans-info"),this.prevAnsVal=this.mainDiv.querySelector(".prev-ans-val"),this.loader=this.mainDiv.querySelector(".loader"),this.details=this.mainDiv.querySelector(".details")}displayCurrQ(e,t){this.#n(e),this.currQuestionText.innerHTML=e.currQText,this.prevAnsVal.innerText="";const s=this.#r(e,t);this.scoreSliderInput.value=s,this.scoreSliderInput.dispatchEvent(new Event("input"))}async showLoader(){this.loader.classList.remove("fully-hidden"),this.details.classList.add("fully-hidden"),this.details.classList.add("transparent")}async hideLoader(){this.loader.classList.add("fully-hidden"),this.details.classList.remove("fully-hidden"),setTimeout((()=>this.details.classList.remove("transparent")),10)}#n(e){e.endOfQueue?this.ratePanel.classList.add("hidden"):this.ratePanel.classList.remove("hidden")}#r(e,t){let s=5;return t&&e.currQAns?(this.prevAnsDiv.classList.remove("hidden"),this.prevAnsVal.innerText="Skipped",e.currQAns.skip||(s=e.currQAns.answerVal,this.prevAnsVal.innerText=s)):this.prevAnsDiv.classList.add("hidden"),s}}class n extends EventTarget{mainDiv;answerUiPanel;questionsQueue;btn;constructor(e,t=null){super(),this.mainDiv=e,this.btn=t,this.answerUiPanel=new i(e)}init(){this.answerUiPanel.rateBtn.addEventListener("click",(e=>{this.answerQuestion(e)})),this.answerUiPanel.skipBtn.addEventListener("click",(e=>{this.answerQuestion(e)}))}setRecentAnswers(e){this.questionsQueue.setRecentAnswers(e)}_showCurrQ(e=!0){const t=this.questionsQueue.getCurrQInfo();this.answerUiPanel.displayCurrQ(t,e)}getAnswerObj(e,t){const s=e.currentTarget===this.answerUiPanel.skipBtn,i=s?null:Number(this.answerUiPanel.scoreSliderInput.value),n=this._getQuestionDetails(t),r={questionId:t._id,skip:s,questionDetails:n};return s||(r.answerVal=i),r}_getQuestionDetails(e){const t={},s=["_id","apiPageNum","alreadyInDb","currAns"];for(let i in e)s.includes(i)||(t[i]=e[i]);return t}activate(){this.btn&&this.btn.classList.add("active-q-mode"),(0,e.Ji)(this.mainDiv)}deactivate(){this.btn&&this.btn.classList.remove("active-q-mode"),(0,e.U6)(this.mainDiv)}}class r extends n{queueInputPanel;async answerQuestion(e){const t=this.questionsQueue.removeQueueItem(0,!0);this.questionsQueue.savePrevQ(t._id);const s=this.getAnswerObj(e,t);this.dispatchEvent(new CustomEvent("answeredQ",{detail:{answerObj:s}})),this._showCurrQ(),await this.questionsQueue.update()&&this.questionsQueue.checkForOutdatedQs(!0)}_showCurrQ(){const e=this.queueInputPanel?.includeAlreadyAnsweredCheckbox.checked;super._showCurrQ(e)}async activate(){super.activate()}async updateQueueAndShowFirst(e=!1){this.answerUiPanel.showLoader(),await this.updateQueue(e),this.answerUiPanel.hideLoader(),this._showCurrQ()}async updateQueue(e){await this.questionsQueue.update(e),this.questionsQueue.checkForOutdatedQs()}}class a{#a=!1;questionsModes;qModeSwitcher;currQuestionMode;categoryTypeName;categoryName;notYetPostedAnswers=[];allRecentAnswers=[];static#u=6e5;constructor(e,t=[],s=null,i=null){this.questionsModes=e,this.qModeSwitcher=t,this.categoryTypeName=s,this.categoryName=i}init(){for(let e of this.questionsModes)e.init();window.addEventListener("beforeunload",(()=>{this._postAnswers(!0)})),setInterval((()=>{this._postAnswers(!1)}),a.#u);for(let e of this.questionsModes)e.addEventListener("answeredQ",(e=>{const t=e.detail.answerObj;this._handleNewAnswer(t)}));this.#o()}#o(){for(let e of this.qModeSwitcher){const t=e.btn,s=e.mode;t.addEventListener("click",(async()=>{this.#a||this.currQuestionMode===s||(this.#a=!0,await this.switchQMode(s),this.#a=!1)}))}}_handleNewAnswer(e){this._updateAnsArrayWithAns(this.notYetPostedAnswers,e),this._updateAnsArrayWithAns(this.allRecentAnswers,e),this._setRecentAnswers()}removeQmode(){this.currQuestionMode.deactivate()}async setQMode(e){this.currQuestionMode=e,await this.currQuestionMode.activate(),this._setRecentAnswers(),this.currQuestionMode instanceof r&&await this.currQuestionMode.updateQueueAndShowFirst()}_setRecentAnswers(){"recs"!==this.currQuestionMode?.name&&this.currQuestionMode.setRecentAnswers(this.allRecentAnswers)}_updateAnsArrayWithAns(e,s){(0,t.cT)(e,s,((e,t)=>e.questionId===t.questionId))}async switchQMode(t){this.removeQmode(),await(0,e.xS)(this.currQuestionMode.mainDiv),await this.setQMode(t)}resetAnswers(){this.notYetPostedAnswers=[]}clearRecentlyPostedAnswers(e){for(let s of e){const e=t(s,this.allRecentAnswers);e>-1&&this.allRecentAnswers.splice(e,1)}function t(e,t){return t.findIndex((t=>{let s=!0;const i=["questionId","skip","answerVal"];for(let n in t)if(i.includes(n)&&(s=t[n]===e[n],!s))break;return s}))}}async _postAnswers(e=!1){if(0===this.notYetPostedAnswers.length)return;const[t,s]=this.#c(),i={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({type:"answers",data:s})};e&&(i.keepalive=!0),this.resetAnswers(),await fetch(t,i),this.clearRecentlyPostedAnswers(s)}#c(){let e,t;return this.categoryName?(e=`/questions/${this.categoryTypeName}/${this.categoryName}`,t=this.notYetPostedAnswers.slice()):(e="/questions/mixed-categories",t=this.#d(this.notYetPostedAnswers)),[e,t]}#d(e){const t=[];for(let i of e){const e=i.questionDetails.categoryTypeName,n=i.questionDetails.categoryName,r=t.findIndex((t=>{const s=t.catType===e,i=t.cat===n;return s&&i})),a=s(i);if(r>-1)t[r].answers.push(a);else{const s={catType:e,cat:n,answers:[a]};t.push(s)}}function s(e){return delete e.questionDetails.categoryName,delete e.questionDetails.categoryTypeName,e}return t}}class u{mainDiv;constructor(e){this.mainDiv=e.querySelector(".queue-input-panel")}}class o extends u{includeAlreadyAnsweredCheckbox;constructor(e){super(e),this.includeAlreadyAnsweredCheckbox=this.mainDiv.querySelector(".incl-prev-ans")}}function c(e,t,s){return s?[t,s]:[e.categoryTypeName??e.categoryType,e.categoryName??e.category]}function d(e,t,s,i){let n;switch(i){case"Films":case"TV":n={imgPath:e?.posterPath?`https://image.tmdb.org/t/p/w185/${e.posterPath}`:null,qDisplayText:`${e?.title} (${h(e?.releaseDate)})`,qSourceDisplayText:`${e?.title}`,imgPlaceHolderTxt:`${e?.title}`};break;case"Music":n={imgPath:e?.image,qDisplayText:`${e?.trackName} - ${e?.artist} (${e?.album} - ${new Date(e?.releaseDate).getFullYear()})`,qSourceDisplayText:`${e?.trackName} - ${e?.artist}`,imgPlaceHolderTxt:`${e?.trackName}`};break;case"Video Games":n={imgPath:e?.image?`https://images.igdb.com/igdb/image/upload/t_cover_big/${e.image}.jpg`:null,qDisplayText:`${e?.title} (${h(e?.releaseDate)}) (${e.platforms})`,qSourceDisplayText:`${e?.title}`,imgPlaceHolderTxt:`${e?.title}`};break;case"Books":n={imgPath:e?.image?`https://covers.openlibrary.org/b/id/${e.image}-M.jpg`:null,qDisplayText:`${e?.title} (${e?.author})`,qSourceDisplayText:`${e?.title}`,imgPlaceHolderTxt:`${e?.title}`};break;default:n={imgPath:null,qDisplayText:e?.text,qSourceDisplayText:e?.shortText,imgPlaceHolderTxt:e?.shortText??e.text}}return n[t]}function h(e){return e?new Date(e).getFullYear():"Unknown"}function l(e,t,s){const i=document.createElement("div"),n=d(e,"imgPath",0,s);if(n){const t=document.createElement("img");t.setAttribute("src",n),t.setAttribute("loading","lazy"),t.setAttribute("alt",e?.title),i.appendChild(t)}else{const t=document.createElement("div");t.classList.add("placeholder-img");const n=document.createElement("span"),r=d(e,"imgPlaceHolderTxt",0,s);n.innerText=r,t.appendChild(n),i.appendChild(t)}if(e.previewUrl){const t=document.createElement("audio");t.setAttribute("controls","true"),t.setAttribute("src",e.previewUrl),i.appendChild(t)}return i}class p{_queue=[];#h=0;#l;#p;constructor(e,t,s){this._queue=e.querySelector(".queue-imgs"),this.#l=t,this.#p=s,this._queue.addEventListener("transitionend",(e=>{this.#m(e)}))}#m(e){"left"===e.propertyName&&(this.#h--,this._deleteDomQ(0),this._queue.classList.remove("queue-imgs-transitioning"),this.#h>0&&setTimeout((()=>this.#w()),0))}addToQueue(e){for(let t of e){const[e,s]=c(t,this.#l,this.#p),i=l(t,0,s);i.setAttribute("data-id",t._id),this._queue.appendChild(i)}}removeQueueItem(e,t){this._queue.hasChildNodes()&&(0===e&&t?(this.#h++,this.#w()):this._deleteDomQ(e))}_deleteDomQ(e){this._queue.classList.contains("queue-imgs-transitioning")&&e>0&&e++,this._queue.removeChild(this._queue.children[e])}#w(){this._queue.classList.add("queue-imgs-transitioning")}resetQueue(){this._queue.innerText=""}}class m{_categoryTypeName;_categoryName;queue=[];queueType;_domQueue;_queuePrevQs=[];constructor(e,t=null,s=null){this._categoryTypeName=t,this._categoryName=s,this._domQueue=new p(e,t,s)}getCurrQInfo(){let e,t,s=!1;if(0===this.queue.length)e=this._getEndQueueMsg(),s=!0;else{const s=this.queue[0],[i,n]=c(s,this._categoryTypeName,this._categoryName);e=d(s,"qDisplayText",0,n),t=s.currAns}return{endOfQueue:s,currQText:e,currQAns:t}}_getEndQueueMsg(){return this.endQueueMsg}removeQueueItem(e,t){const s=this.queue[e];return this.queue.splice(e,1),this._domQueue.removeQueueItem(e,t),s}_addToQueue(e){this.queue=this.queue.concat(e),this._domQueue.addToQueue(e)}_resetQueue(){this.queue=[],this._domQueue.resetQueue(),this._queuePrevQs=[]}savePrevQ(e){this._queuePrevQs.push(e)}}class w extends m{static#y=30;_QUEUE_REFRESH_THRESHOLD=10;#Q;_endOfQSource=!1;_currentlyUpdating=!1;endQueueMsg;inputPanel;allRecentAnswers=[];async update(e=!1){this._updateQueuePrevQs(e);let t=!1;if(!this._currentlyUpdating){if(this.checkQueueToBeUpdated()){const s=w.#y,i=this.queue.map((e=>e._id));let n=1;if(!e){const e=this.queue.at(-1)?.apiPageNum;n=this.queue.length>0?e:1}const r=await this.#v(s,i,n);this._endOfQSource=r.endOfQSource,this._addToQueue(r.results),t=!0}return t}}_updateQueuePrevQs(e){e&&(this._queuePrevQs=[])}checkQueueToBeUpdated(){const e=this.queue.length<=this._QUEUE_REFRESH_THRESHOLD,t=!this._endOfQSource;return e&&t}setRecentAnswers(e){this.allRecentAnswers=e}checkForOutdatedQs(e=!1){for(let t of this.allRecentAnswers){const s=this.queue.findIndex((e=>e._id===t.questionId));s>-1&&this.handleOutdatedQueueItem(s,t,e)}}handleOutdatedQueueItem(e,t,s){const i=this.inputPanel?.includeAlreadyAnsweredCheckbox?.checked,n=this._queuePrevQs.includes(this.queue[e]._id);i&&!n?this.queue[e].currAns={skip:t.skip,answerVal:t?.answerVal}:this.removeQueueItem(e,s)}async#v(e,t,s){this._currentlyUpdating=!0;const i=this._getPostObj(e,t,s),n=await fetch(`/questions/${this._categoryTypeName}/${this._categoryName}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)}),r=await n.json();return this._currentlyUpdating=!1,r}_getPostObj(e,t,s){return{type:"updateQueue",data:{queueType:this.queueType,numQs:e,currQueueIds:t,startApiPage:s,filters:{}}}}reset(){this._resetQueue(),this._endOfQSource=!1,this._currentlyUpdating=!1}}class y extends w{endQueueMsg="You have answered all suggested questions in this category! Use Search to answer more!";queueType="auto";_getPostObj(e,t,s){const i=super._getPostObj(e,t,s);return i.data.includeAnsweredQs=this.inputPanel.includeAlreadyAnsweredCheckbox.checked,i}}class Q extends u{includeAlreadyAnsweredCheckbox;searchInput;searchBtn;constructor(e){super(e),this.includeAlreadyAnsweredCheckbox=this.mainDiv.querySelector(".incl-prev-ans"),this.searchInput=this.mainDiv.querySelector(".search-input"),this.searchBtn=this.mainDiv.querySelector(".search-btn")}init(){this.searchInput.addEventListener("keyup",(e=>{13===e.keyCode&&(e.preventDefault(),this.searchBtn.click())}))}}class v extends w{endQueueMsg="No results for this search term (or you answered them all already), try another!";noSearchTermMsg="Enter a search term!";queueType="search";searchQuery="";_getEndQueueMsg(){return""===this.searchQuery?this.noSearchTermMsg:this.endQueueMsg}checkQueueToBeUpdated(){const e=super.checkQueueToBeUpdated(),t=""!==this.searchQuery;return e&&t}checkSearchTermChanged(){const e=this.searchQuery;return this.setSearchQuery(),this.searchQuery!==e}setSearchQuery(){this.searchQuery=encodeURI(this.inputPanel.searchInput.value)}_getPostObj(e,t,s){const i=super._getPostObj(e,t,s);return i.data.searchQuery=this.searchQuery,i.data.includeAnsweredQs=this.inputPanel.includeAlreadyAnsweredCheckbox.checked,i}}class q extends p{removeQueueItem(e,t){this._queue.hasChildNodes()&&0===e&&this._deleteDomQ(e)}}class _ extends m{constructor(e,t=null,s=null){super(e,t,s),this._domQueue=new q(e,t,s)}update(e){this._resetQueue(),this._addToQueue([e])}}class g{wrapper;#q;#_;constructor(e){this.wrapper=e,this.#q=e.querySelector(".centre-modal"),this.#_=this.#q.querySelector(".close")}init(){const e=[this.#_,this.wrapper];for(let t of e)t.addEventListener("click",(()=>this.hide()));this.#q.addEventListener("click",(e=>e.stopPropagation()))}show(){(0,e.Ji)(this.wrapper)}hide(){(0,e.Yi)(this.wrapper)}}class A extends n{name="single";_qSource;_answerUiModal;constructor(e,t,s=null){super(e,s),this.questionsQueue=new _(e),this._qSource=t;const i=e.querySelector(".centre-modal-wrapper");this._answerUiModal=new g(i)}init(){super.init(),this._qSource.addEventListener("answerSingleQ",(e=>{this._handleClickSingleQ(e)})),this._answerUiModal.init()}answerQuestion(e){const t=this.questionsQueue.removeQueueItem(0,!0),s=this.getAnswerObj(e,t);return this.dispatchEvent(new CustomEvent("answeredQ",{detail:{answerObj:s}})),this._answerUiModal.hide(),s}_handleClickSingleQ(e){const t=e.detail.question,s=this._makeQuestion(t);this.questionsQueue.update(s),this._answerUiModal.show(),this._showCurrQ()}}class T extends EventTarget{_listDiv;_contentDiv;_qDivClass;constructor(e){super(),this._listDiv=e,this._contentDiv=e.querySelector(".content")}_createQDiv(e){const[t,s]=c(e,this._categoryTypeName,this._categoryName),i=l(e.questionDetails,0,s);i.classList.add(this._qDivClass);const n=this._createQTextElem(e,t,s),r=this._createtQScoreElem(e);this._setupQImg(e,i);const a={qSourceItem:i,qText:n,qScore:r,catTypeName:t,catName:s};return this._addToQDiv(a),i}_handleRateBtnClick(e,t){this.dispatchEvent(new CustomEvent("answerSingleQ",{detail:{question:t}}))}_buildContentDiv(e){for(let t of e){const e=this._createQDiv(t);this._contentDiv.appendChild(e)}}_createQTextElem(e,t,s){const i=document.createElement("p");return i.innerText=d(e.questionDetails,"qSourceDisplayText",0,s),i.classList.add("q-text"),i}_createtQScoreElem(e){const t=document.createElement("p");return t.innerText=this._getScoreText(e),t.classList.add("user-score"),t}_setupQImg(e,t){const s=t.querySelector("img")??t.querySelector(".placeholder-img");s.addEventListener("click",(t=>{this._handleRateBtnClick(t,e)}));const i=document.createElement("div");i.classList.add("q-source-img-wrapper"),i.appendChild(s),t.insertBefore(i,t.children[0]);const n=document.createElement("div");n.classList.add("q-source-item-hover");const r=document.createElement("span");r.innerText=this._getHoverText(),r.classList.add("q-source-hover-txt"),n.appendChild(r),i.appendChild(n)}}s(300);const S=document.querySelector(".main-header"),f=S.dataset.catType,P=S.dataset.cat,x=document.querySelector(".auto-mode"),D=document.querySelector(".search-mode"),k=document.querySelector(".single-answer-mode"),b=document.querySelector(".prev-answers-list"),I=new class extends T{#g=!0;#A=[];_categoryTypeName;_categoryName;_qDivClass="prev-ans-item";constructor(e,t,s){super(e),this._categoryTypeName=t,this._categoryName=s}async activate(){this.#g&&(this.#A=await this.#T(),this._buildContentDiv(this.#A),this.#g=!1),(0,e.Ji)(this._listDiv)}deactivate(){(0,e.Yi)(this._listDiv)}updateAnswersList(e){for(let t of e){const e=this.#A.findIndex((e=>e.questionId===t.questionId)),s=this._createQDiv(t);e>-1?(this.#A.splice(e,1,t),this._contentDiv.replaceChild(s,this._contentDiv.children[e])):(this.#A.push(t),this._contentDiv.appendChild(s))}}async#T(){const e=await fetch(`/questions/user-answers/${this._categoryTypeName}/${this._categoryName}`);return await e.json()}_getScoreText(e){return e.skip?"Skipped":Number(e.answerVal).toFixed(1)}_addToQDiv(e){return e.qSourceItem.appendChild(e.qText),e.qSourceItem.appendChild(e.qScore),e.qSourceItem}_getHoverText(){return"Re-rate it!"}}(b,f,P),E=document.querySelector(".auto-queue-mode-btn"),C=document.querySelector(".search-mode-btn"),N=document.querySelector(".prev-answers-mode-btn"),L=new class extends r{name="auto";constructor(e,t,s,i=null){super(e,i),this.questionsQueue=new y(e,t,s),this.queueInputPanel=new o(e)}init(){super.init(),this.questionsQueue.inputPanel=this.queueInputPanel,this.queueInputPanel.includeAlreadyAnsweredCheckbox.addEventListener("click",(async()=>{this.questionsQueue.reset(),await this.updateQueueAndShowFirst(!0)}))}}(x,f,P,E),M=new class extends r{name="search";constructor(e,t,s,i=null){super(e,i),this.questionsQueue=new v(e,t,s),this.queueInputPanel=new Q(e)}async updateQueueAndShowFirst(e=!1){""!==this.queueInputPanel.searchInput.value&&(this.answerUiPanel.showLoader(),await super.updateQueue(e)),this.answerUiPanel.hideLoader(),this._showCurrQ()}init(){super.init(),this.questionsQueue.inputPanel=this.queueInputPanel,this.questionsQueue.inputPanel.init(),this.queueInputPanel.searchBtn.addEventListener("click",(async()=>{this.questionsQueue.checkSearchTermChanged()&&this.#S()})),this.queueInputPanel.includeAlreadyAnsweredCheckbox.addEventListener("click",(async()=>{this.#S()}))}async#S(){this.questionsQueue.reset(),this.questionsQueue.setSearchQuery(),await this.updateQueueAndShowFirst(!0)}}(D,f,P,C),U=new class extends A{name="prevAns";constructor(e,t,s,i,n=null){super(e,t,n),this.questionsQueue=new _(e,s,i)}setRecentAnswers(e){this._qSource.updateAnswersList(e)}async activate(){super.activate(),await this._qSource.activate()}deactivate(){this._qSource.deactivate(),super.deactivate()}_makeQuestion(e){const t={_id:e.questionId,currAns:{skip:e?.skip,answerVal:e?.answerVal}};for(let s in e.questionDetails)t[s]=e.questionDetails[s];return t}}(k,I,f,P,N),R=[L,M,U],O=[{mode:L,btn:E},{mode:M,btn:C},{mode:U,btn:N}],B=new class extends a{#f=[];_setRecentAnswers(){"prevAns"===this.currQuestionMode?.name?(this.currQuestionMode.setRecentAnswers(this.#f),this.#f=[]):this.currQuestionMode.setRecentAnswers(this.allRecentAnswers)}_handleNewAnswer(e){this._updateAnsArrayWithAns(this.#f,e),super._handleNewAnswer(e)}}(R,O,f,P);B.init(),window.onload=async()=>{await B.setQMode(L)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,