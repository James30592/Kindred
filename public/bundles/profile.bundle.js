(()=>{"use strict";var t={733:(t,e,s)=>{s.d(e,{Yi:()=>a,_5:()=>r});var n=s(922);async function r(t){!function(t){t.classList.remove("fully-hidden"),setTimeout((()=>t.classList.remove("transparent")),10)}(t),await async function(t){await(0,n.hk)(t,"opacity")}(t)}async function a(t){!function(t){t.classList.add("transparent")}(t),await async function(t){await(0,n.hk)(t,"opacity"),t.classList.add("fully-hidden")}(t)}},300:(t,e,s)=>{var n=s(733);class r{#t;#e;constructor(t){this.#t=t.querySelector(".pop-btn"),this.#e=t.querySelector(".pop-btn-content")}init(){this.#s(this.#t,this.#e)}#s(t,e){t.addEventListener("click",(()=>{this.#n(t,e)}),{once:!0})}async#n(t,e){await(0,n._5)(e),window.addEventListener("click",(async()=>{await(0,n.Yi)(e),this.#s(t,e)}),{once:!0})}}document.querySelectorAll(".pop-btn-container").forEach((t=>{new r(t).init()}))},922:(t,e,s)=>{function n(t=0,e=1,s=!1){const n=e-t,r=Math.random()*n+t;return s?Math.floor(r):r}function r(t){return Math.random()<=t}function a(t,e=null){return new Promise((s=>{t.addEventListener("transitionend",(async n=>{e?(n.propertyName===e||await a(t,e),s()):s()}),{once:!0})}))}s.d(e,{PO:()=>r,hk:()=>a,wT:()=>n})}},e={};function s(n){var r=e[n];if(void 0!==r)return r.exports;var a=e[n]={exports:{}};return t[n](a,a.exports,s),a.exports}s.d=(t,e)=>{for(var n in e)s.o(e,n)&&!s.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{class t{x;y;constructor(t,e){this.x=t,this.y=e}getTxt(){return`${this.x}, ${this.y}`}getReverse(){return new t(-this.x,-this.y)}vectorTo(e){return new t(e.x-this.x,e.y-this.y)}vectorFrom(e){return new t(this.x-e.x,this.y-e.y)}addVector(e){return new t(this.x+e.x,this.y+e.y)}getScaledVector(e){return new t(this.x*e,this.y*e)}getUnitVector(){const e=this.getMag();return new t(this.x/e,this.y/e)}getMag(){return Math.sqrt(Math.pow(this.x,2)+Math.pow(this.y,2))}getRotatedVector(e,s=new t(0,0)){const n=new t(this.x,this.y),r=Math.sin(e),a=Math.cos(e);n.x-=s.x,n.y-=s.y;const i=n.y*r+n.x*a,o=n.y*a-n.x*r;return n.x=i+s.x,n.y=o+s.y,n}}var e=s(922);function n(t){const e=t.getTotalLength();t.setAttribute("stroke-dasharray",e),t.setAttribute("stroke-dashoffset",e),setTimeout((()=>{t.classList.add("draw-svg-path"),t.setAttribute("stroke-dashoffset",0)}),0)}async function r(t){let s=new Promise((t=>t()));for(let r of t)r.classList.remove("hidden"),n(r),s=(0,e.hk)(r,"stroke-dashoffset");await s}class a{#r;#a;#i;#o;pathElem;ctrlPt1;ctrlPt2;constructor(t,e,s){this.#r=t,this.#a=e,this.#o=s}_getContinuingCtrlPt1(t,e){const s=e.vectorTo(t).getRotatedVector(Math.PI);return e.addVector(s)}_getRandVect(t,s,n,r){const a=(0,e.wT)(r.minAngleDiff,r.maxAngleDiff)*t,i=s.getRotatedVector(a),o=n*(0,e.wT)(r.minMagFact,r.maxMagFact);return i.getScaledVector(o)}setDVal(){this.#i=`M ${this.#r.getTxt()} \n    C ${this.ctrlPt1.getTxt()} ${this.ctrlPt2.getTxt()} ${this.#a.getTxt()}`}createPathElem(){const t=document.createElementNS("http://www.w3.org/2000/svg","path");return t.setAttribute("d",this.#i),t.dataset.subDrawIdx=this.#o,this.pathElem=t,this.pathElem}}class i extends a{rotDirToSegVect;static#h={minAngleDiff:Math.PI/180*25,maxAngleDiff:Math.PI/180*25,minMagFact:.3,maxMagFact:.3};getCtrlPts(t,e,s,n,r,a){this.ctrlPt1=this.#c(t,e,s,r,a),this.ctrlPt2=this.#d(n,r,e)}#c(t,s,n,r,a){let o;if(0===t){this.rotDirToSegVect=(0,e.PO)(.5)?1:-1;const t=i.#h,a=this._getRandVect(this.rotDirToSegVect,r,s,t);o=n.addVector(a)}else{this.rotDirToSegVect=-a.corePath.rotDirToSegVect;const t=a.corePath.ctrlPt2;o=this._getContinuingCtrlPt1(t,n)}return o}#d(t,e,s){const n=i.#h,r=e.getReverse(),a=this._getRandVect(-this.rotDirToSegVect,r,s,n);return t.addVector(a)}}class o extends a{#l;rotDirToCorePath;insideCore;static#g={minAngleDiff:Math.PI/180*10,maxAngleDiff:Math.PI/180*20,minMagFact:.3,maxMagFact:.4};static#P={minAngleDiff:Math.PI/180*5,maxAngleDiff:Math.PI/180*30,minMagFact:.2,maxMagFact:.6};static#m=1;static#u={minAngleDiff:Math.PI/180*70,maxAngleDiff:Math.PI/180*90,minMagFact:.25,maxMagFact:.36};constructor(t,e,s,n){super(t,e,s),this.#l=n}getCtrlPts(t,e,s,n,r,a,i){this.ctrlPt1=this.#c(t,n,e,a),this.ctrlPt2=this.#d(s,r,t,a,i)}#c(t,e,s,n){let r;if(e?.hasPattern){const t=e.extraPaths[this.#l];this.insideCore=t.insideCore,this.rotDirToCorePath=-t.rotDirToCorePath;const n=t.ctrlPt2;r=this._getContinuingCtrlPt1(n,s)}else{this.rotDirToCorePath=1===this.#l?1:-1;const e=n.rotDirToSegVect!==this.rotDirToCorePath;this.insideCore=e;const a=e?o.#P:o.#g,i=s.vectorTo(n.ctrlPt1).getUnitVector(),h=this._getRandVect(this.rotDirToCorePath,i,t,a);r=s.addVector(h)}return r}#d(t,e,s,n,r){let a;const i=t.vectorTo(n.ctrlPt2).getUnitVector();let h=this.insideCore?o.#P:o.#g;this.#p(e,r)&&(h=o.#u);const c=this._getRandVect(-this.rotDirToCorePath,i,s,h);return a=t.addVector(c),a}#p(t,s){let n=0;return t?.hasPattern&&(n=s?1:this.insideCore?o.#m:0),(0,e.PO)(n)}}class h{#f;#r;#a;#C;#w;#E;extraPathsBothEndsPerp=!1;hasPattern;corePath;extraPaths=[];allPaths=[];static#D=.4;constructor(t,e,s,n){this.#f=t,this.hasPattern=e,this.#r=s,this.#a=n,this.#C=this.#r.vectorTo(this.#a),this.#w=this.#C.getUnitVector(),this.#E=this.#C.getMag()}setCorePath(t){this.corePath=new i(this.#r,this.#a,this.#f),this.corePath.getCtrlPts(this.#f,this.#E,this.#r,this.#a,this.#w,t)}setExtraPaths(t,s){if(!this.hasPattern)return;const n=t?.extraPathsBothEndsPerp;this.extraPathsBothEndsPerp=!n&&(0,e.PO)(h.#D);for(let e=0;e<2;e++)this.extraPaths[e]=new o(this.#r,this.#a,this.#f,e),this.extraPaths[e].getCtrlPts(this.#E,this.#r,this.#a,t,s,this.corePath,this.extraPathsBothEndsPerp)}setAllPaths(){this.allPaths.push(this.corePath),this.allPaths.push(...this.extraPaths)}setPathDVals(){this.allPaths.forEach((t=>{t.setDVal()}))}createPathElems(){const t=[];return this.allPaths.forEach((e=>{t.push(e.createPathElem())})),t}}class c extends EventTarget{startId;#I;pathElems=[];#_;#S;#C;#V;#x;#T;#M;#A;#R;#v;#y;#N=!1;static#O=9;static#L=.02;static#b=.01;constructor(e){super(),this.startId=e.elemIds[0],this.#I=e.elemIds[1],this.#_=e.coords[0],this.#S=e.coords[1],this.#C=this.#_.vectorTo(this.#S),this.#V=this.#C.getMag();const s=(window.innerWidth+window.innerHeight)/2;this.#v=c.#O/100*s,this.#M=Math.round(this.#V/this.#v),this.#A=.4,this.#R=.9;const n=this.#C.x/this.#M,r=this.#C.y/this.#M;this.#x=new t(n,r);const a=this.#C.getRotatedVector(Math.PI/2);this.#T=a.getUnitVector()}async draw(){if(!this.#N){this.#N=!0;for(let t of this.#y){const e=t.allPaths.map((t=>t.pathElem));await r(e)}this.dispatchEvent(new CustomEvent("connectionDrawn",{detail:{endId:this.#I}}))}}hidePaths(){this.pathElems.forEach((t=>{t.classList.add("hidden")}))}createPaths(){const t=this.#k(),e=this.#B();this.#y=this.#U(e,t),this.#F(this.#y),this.#$(this.#y)}#$(t){t.forEach((t=>{this.pathElems.push(...t.createPathElems())}))}#F(t){[(t,e)=>t.setCorePath(e),(t,e,s)=>t.setExtraPaths(e,s),t=>t.setAllPaths(),t=>t.setPathDVals()].forEach((e=>{this.#q(t,e)}))}#q(t,e){t.forEach(((s,n)=>{const r=t[n-1],a=t[n+1];e(s,r,a)}))}#U(t,e){const s=[];for(let n=0;n<t.length;n++){const r=1===t[n],a=e[n],i=e[n+1],o=new h(n,r,a,i);s.push(o)}return s}#B(){const t=Array.from("g".repeat(this.#M));for(let n=0;n<this.#M;n++){let r=this.#A;const[a,i]=[t[n-1],t[n-2]],o=!!i&&"g"!==i;if(a&&"g"!==a)if(o){const e=s(n,t);r*=Math.pow(this.#R,e)}else r=1;else n===this.#M-1&&(r=0);const h=(0,e.PO)(r)?1:"g";t[n]=h}return t;function s(t,e){let s=1,n=t-2;for(;n>=0&&"g"!==e[n];)s++,n--;return s}}#k(){let t=this.#J();return t=this.#j(t),t.splice(0,0,this.#_),t.push(this.#S),t}#J(){const e=[];for(let s=1;s<this.#M;s++){const n=this.#_.x+this.#x.x*s,r=this.#_.y+this.#x.y*s;e.push(new t(n,r))}return e}#j(t){for(let s=0;s<t.length;s++){const n=t[s],r=(0,e.wT)(-c.#L,c.#L),a=(0,e.wT)(-c.#b,c.#b),i=this.#x.getScaledVector(r),o=this.#T.getScaledVector(this.#V*a),h=n.addVector(i).addVector(o);t[s]=h}return t}}s(300);const d=document.querySelectorAll(".connect-elem"),l=new class{#z;#H=[];#G;constructor(t){this.#z=t}createAndDraw(){this.#X(this.#z),this.#Y()}#Y(){this.#H.forEach((t=>{t.hidePaths(),t.addEventListener("connectionDrawn",(t=>{this.#W(t.detail.endId)}))})),this.#W(this.#G)}#W(t){this.#H.forEach((e=>{e.startId===t&&e.draw()}))}#X(e){const s=document.querySelector(".svg-connects-wrapper"),n=s.getBoundingClientRect(),r=s.querySelector('[data-draw-origin="true"');this.#G=r.dataset.connectId;const a=new t(n.left,n.top),i=n.width,o=n.height,h=this.#K(e,a),c=this.#Q(h),d=document.createElementNS("http://www.w3.org/2000/svg","svg");return d.classList.add("connections-svg"),d.setAttribute("viewBox",`0 0 ${i} ${o}`),d.setAttribute("xmlns","http://www.w3.org/2000/svg"),d.setAttribute("preserveAspectRatio","none"),d.setAttribute("alt",""),this.#Z(c),this.#tt(d),s.appendChild(d),d}#tt(t){this.#H.forEach((e=>{t.append(...e.pathElems)}))}#Z(t){t.forEach((t=>{const e=new c(t);e.createPaths(),this.#H.push(e)}))}#Q(t){const e=[];return t.forEach((s=>{s?.connectsTo?.forEach((n=>{const r=s.posn,a=t.find((t=>t.elemId===n)),i={coords:[r,a.posn],elemIds:[s.elemId,n]};e.push(i)}))})),e}#K(t,e){const s=[];return t.forEach((t=>{const n={},r=t.getBoundingClientRect(),a=window.getComputedStyle(t,":after"),i=this.#et(r,a,e),o=t.dataset.connectId;n.elemId=o,n.posn=i,n.connectsTo=t.dataset?.connectsTo?.split(","),s.push(n)})),s}#et(e,s,n){const r=e.left-n.x+parseInt(s.left,10),a=e.top-n.y+parseInt(s.top,10);return new t(r,a)}}(d);window.addEventListener("load",(()=>{l.createAndDraw()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,