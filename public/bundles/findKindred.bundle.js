(()=>{"use strict";var t={733:(t,e,n)=>{n.d(e,{Yi:()=>a,_5:()=>o,tA:()=>c});var i=n(922);async function o(t){!function(t){t.classList.remove("fully-hidden"),setTimeout((()=>t.classList.remove("transparent")),10)}(t),await async function(t){await(0,i.hk)(t,"opacity")}(t)}async function a(t){!function(t){t.classList.add("transparent")}(t),await async function(t){await(0,i.hk)(t,"opacity"),t.classList.add("fully-hidden")}(t)}function c(t,e){return new Promise((async n=>{await a(t),await o(e),n()}))}},300:(t,e,n)=>{var i=n(733);class o{#t;#e;constructor(t){this.#t=t.querySelector(".pop-btn"),this.#e=t.querySelector(".pop-btn-content")}init(){this.#n(this.#t,this.#e)}#n(t,e){t.addEventListener("click",(()=>{this.#i(t,e)}),{once:!0})}async#i(t,e){await(0,i._5)(e),window.addEventListener("click",(async()=>{await(0,i.Yi)(e),this.#n(t,e)}),{once:!0})}}document.querySelectorAll(".pop-btn-container").forEach((t=>{new o(t).init()}))},922:(t,e,n)=>{function i(t,e=null){return new Promise((n=>{t.addEventListener("transitionend",(async o=>{e?(o.propertyName===e||await i(t,e),n()):n()}),{once:!0})}))}n.d(e,{hk:()=>i})}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var a=e[i]={exports:{}};return t[i](a,a.exports,n),a.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(733);const e={_rebuildContentDiv(t){this._clearContentDiv(),this._buildContentDiv(t)},_clearContentDiv(){this._contentDiv.replaceChildren()},_showLoader(){return(0,t.tA)(this._contentDiv,this._loader)},_hideLoader(){return(0,t.tA)(this._loader,this._contentDiv)},async handleUpdateBtnClick(){const t=this._showLoader(),e=await this._getUpdatedSourceData();await t,this._rebuildContentDiv(e),this._hideLoader()},validateHandleUpdate(t,e){this._validateSelections()?(t.scrollIntoView({behavior:"smooth"}),this.handleUpdateBtnClick()):alert(e)}};class i{catTypes={};constructor(t=null,e=null){t&&(this.catTypes=t.catTypes),e&&this.#o(e)}#o(t){for(let e of t)for(let t of e.categories){const n={isRecommendable:t.isRecommendable};this.checkAndAddCategoryWithType(e.name,t.name,n)}}checkAndAddCategoryWithType(t,e,n=null){const i=this._doesCategoryOrTypeExist(t,e);"nor"===i?this._addTypeAndCategory(t,e,n):"typeOnly"===i&&this._addCategory(t,e,n)}cloneWithData(t,e){const n=new i,o=this.getAllCategories();for(let i of o){const o=i.categoryType,a=i.category,c=t(o,a,e);n.checkAndAddCategoryWithType(o,a,c)}return n}getAllCategories(t=!1){const e=[];for(let n in this.catTypes)for(let i in this.catTypes[n]?.categories){const o={categoryType:n,category:i};if(t){const t=this.catTypes[n].categories[i];for(let e in t)o[e]=t[e]}e.push(o)}return e}_doesCategoryOrTypeExist(t,e){return t in this.catTypes?e in(this.catTypes.categoryTypeName?.categories??[])?"typeAndCat":"typeOnly":"nor"}_addTypeAndCategory(t,e,n){this.catTypes[t]={categories:{}},this._addCategory(t,e,n)}_addCategory(t,e,n){this.catTypes[t].categories[e]=null,n&&this._setData(t,e,n)}_setData(t,e,n){this.catTypes[t].categories[e]={};for(let i in n)this.catTypes[t].categories[e][i]=n[i]}}class o{#a;categoryInfo;constructor(t){this.#a=t}getSelectedCategoryInfo(){let t=new i;return this.#a.forEach((function(e){if(e.checked){const n=e.getAttribute("name").split(".");t.checkAndAddCategoryWithType(n[0],n[1])}})),this.categoryInfo=t,this.categoryInfo}getNumSelected(){return Array.from(this.#a).reduce(((t,e)=>t+e.checked),0)}}class a{_mainDiv;_contentDiv;#c;#s;_loader;static#r="At least one category must be selected.";constructor(t){this._mainDiv=t,this._contentDiv=t.querySelector(".content"),this.#c=document.querySelector(".find-kindred-btn");const e=document.querySelectorAll(".category-checkbox");this.#s=new o(e),this._loader=t.querySelector(".loader")}init(){this.#c.addEventListener("click",(()=>{this.validateHandleUpdate(this._contentDiv,a.#r)}))}_validateSelections(){return this.#s.getNumSelected()>0}_buildContentDiv(t){for(let e of t){const t=this._createRow(e);this._contentDiv.appendChild(t)}}_createRow(t){const e=document.createElement("div");e.classList.add("kindred-item");const n=document.createElement("p"),i=document.createElement("p"),o=document.createElement("p"),a=document.createElement("p");return n.innerText=t.simInfo.simScore.toFixed(1),i.innerText=t.profileName,o.innerText=`${t.location.placeName}, ${t.location.country.long}`,a.innerText=t.simInfo.scoreDiff.toFixed(1),n.classList.add("sim-score"),e.append(n,i,o,a),e}async _findKindred(){const t=this.#s.getSelectedCategoryInfo(),e=await fetch("/find-kindred",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return await e.json()}async _getUpdatedSourceData(){return await this._findKindred()}}Object.assign(a.prototype,e),n(300);const c=document.querySelector(".kindred-list");new a(c).init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,